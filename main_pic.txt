// Selecionando pinos utilizados para comunicação com display LCD
sbit LCD_RS at RE2_bit;// PINO 2 DO PORTD INTERLIGADO AO RS DO DISPLAY
sbit LCD_EN at RE1_bit;// PINO 3 DO PORTD INTERLIGADO AO EN DO DISPLAY
sbit LCD_D7 at RD7_bit;// PINO 7 DO PORTD INTERLIGADO AO D7 DO DISPLAY
sbit LCD_D6 at RD6_bit;// PINO 6 DO PORTD INTERLIGADO AO D6 DO DISPLAY
sbit LCD_D5 at RD5_bit;// PINO 5 DO PORTD INTERLIGADO AO D5 DO DISPLAY
sbit LCD_D4 at RD4_bit;// PINO 4 DO PORTD INTERLIGADO AO D4 DO DISPLAY

// Selecionando direção de fluxo de dados dos pinos utilizados para a comunicação com display LCD
sbit LCD_RS_Direction at TRISE2_bit;// SETA DIREÇÃO DO FLUXO DE DADOS DO PINO 2 DO PORTD
sbit LCD_EN_Direction at TRISE1_bit;// SETA DIREÇÃO DO FLUXO DE DADOS DO PINO 3 DO PORTD
sbit LCD_D7_Direction at TRISD7_bit;// SETA DIREÇÃO DO FLUXO DE DADOS DO PINO 7 DO PORTD
sbit LCD_D6_Direction at TRISD6_bit;// SETA DIREÇÃO DO FLUXO DE DADOS DO PINO 6 DO PORTD
sbit LCD_D5_Direction at TRISD5_bit;// SETA DIREÇÃO DO FLUXO DE DADOS DO PINO 5 DO PORTD
sbit LCD_D4_Direction at TRISD4_bit;// SETA DIREÇÃO DO FLUXO DE DADOS DO PINO 4 DO PORTD

char valor_string [8];

char ucRead;        // Variavel para armazenar o dado lido.

unsigned int  Valor;      // Variavel auxiliar para exibido do contador.
unsigned int  ValorAD;     // Variavel que armazena o valor do A/D.

void main(){
   TRISA.RA2=0;         // Define o pino RA2 do PORTA como saida(Sele??o Display 1).
   TRISA.RA3=0;         // Define o pino RA3 do PORTA como saida(Sele??o Display 2).
   TRISA.RA4=0;         // Define o pino RA4 do PORTA como saida(Sele??o Display 3).
   TRISA.RA5=0;         // Define o pino RA5 do PORTA como saida(Sele??o Display 4).

   TRISD = 0;           // Define todos os pinos Do PORTD como saida.

   TRISB =0;            // Define todos os pinos do PORTB como saída.
   PORTB = 0;           // Colocar todos os pinos em nível baixo.

   //LCD
   Lcd_Init();                               //Inicializa módulo LCD
   Lcd_Cmd(_LCD_CURSOR_OFF);                 //Apaga cursor
   Lcd_Cmd(_LCD_CLEAR);

   // PWM
   PWM1_Init(5000);      // Inicializa módulo PWM com 5Khz
   PWM1_Start();         // Start PWM

   // Comunicação
   UART1_Init(9600);  // Utiliza bibliotecas do compilador para configuração o Baud rate.


   while(1){            // Aqui definimos uma condi??o sempre verdadeira como parametro, portanto todo o bloco ser? repetido indefinidamente.
      ValorAD= ADC_Read(0);     // Lê Canal AD 0
      ValorAD*=0.24;            // Converte valor para o duty cycle
      PWM1_Set_Duty(ValorAD);   // Envia o valor lido de "uiValorAD" para o módulo CCP1 pwm
      Delay_10us;

    if(UART1_Data_Ready()){  // Verifica se um dado foi recebido no buffer
       ucRead = UART1_Read(); // Lê o dado recebido do buffer.
       //ucRead = 'E'; // Lê o dado recebido do buffer.   Teste
       Delay_ms(50);   // Pausa de 50ms.

       if (ucRead == 'E'){
        lcd_out(1,1,"Esquerda");
        Valor = 1;

        // Mostra no display de 7 segmentos o número 1
        PORTA.RA5= 0; // desliga
        PORTA.RA5= 1; //liga quarto display
        PORTD = 0b00000110; //escreve digito 1

        // Faz o LED piscar
        PORTB.RB1=0;         // Todos os pinos do PORTB em 0.
        Delay_ms(100);  // Esta função é interna do compilador, portanto o tempo é de 1000ms ou 1 segundo.
        PORTB.RB1=1;       // Todos os pinos do PORTB em 1.
        Delay_ms(100);  // Aguarda novamente 1 segundo.
       }

       if (ucRead == 'D'){
        lcd_out(1,1,"Direita");
        Valor = 2;

        // Mostra no display de 7 segmentos o número 2
        PORTA.RA5= 0; // desliga
        PORTA.RA5= 1; //liga quarto display
        PORTD = 0b01011011; //escreve digito 2

        // Faz o LED piscar
        PORTB.RB2=0;         // Todos os pinos do PORTB em 0.
        Delay_ms(100);  // Esta função é interna do compilador, portanto o tempo é de 1000ms ou 1 segundo.
        PORTB.RB2=1;       // Todos os pinos do PORTB em 1.
        Delay_ms(100);  // Aguarda novamente 1 segundo.
       }
       if (ucRead == 'R'){
        lcd_out(1,1,"Reverso");
        Valor = 3;

        // Mostra no display de 7 segmentos o número 3
        PORTA.RA5= 0; // desliga
        PORTA.RA5= 1; //liga quarto display
        PORTD = 0b01001111; //escreve digito 3

        // Faz o LED piscar
        PORTB.RB3=0;         // Todos os pinos do PORTB em 0.
        Delay_ms(100);  // Esta função é interna do compilador, portanto o tempo é de 1000ms ou 1 segundo.
        PORTB.RB3=1;       // Todos os pinos do PORTB em 1.
        Delay_ms(100);  // Aguarda novamente 1 segundo.
       }
        if (ucRead == 'F'){
        lcd_out(1,1,"Para Frente");
        Valor = 4;

        // Mostra no display de 7 segmentos o número 4
        PORTA.RA5= 0; // desliga
        PORTA.RA5= 1; //liga quarto display
        PORTD = 0b01100110; //escreve digito 4

        // Faz o LED piscar
        PORTB.RB4=0;         // Todos os pinos do PORTB em 0.
        Delay_ms(100);  // Esta função é interna do compilador, portanto o tempo é de 1000ms ou 1 segundo.
        PORTB.RB4=1;       // Todos os pinos do PORTB em 1.
        Delay_ms(100);  // Aguarda novamente 1 segundo.
       }

      IntToStr(Valor,valor_string);
      lcd_out(2, 2, valor_string);
      }
   }
}